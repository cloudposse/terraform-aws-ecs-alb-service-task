---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-ecs-alb-service-task

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-ecs-alb-service-task

# Badges to display
badges:
  - name: "Build Status"
    image: "https://travis-ci.org/cloudposse/terraform-aws-ecs-alb-service-task.svg?branch=master"
    url: "https://travis-ci.org/cloudposse/terraform-aws-ecs-alb-service-task"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-aws-ecs-alb-service-task.svg"
    url: "https://github.com/cloudposse/terraform-aws-ecs-alb-service-task/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

related:
    - name: "terraform-aws-alb"
      description: "Terraform module to provision a standard ALB for HTTP/HTTP traffic"
      url: "https://github.com/cloudposse/terraform-aws-alb"
    - name: "terraform-aws-alb-ingress"
      description: "Terraform module to provision an HTTP style ingress rule based on hostname and path for an ALB"
      url: "https://github.com/cloudposse/terraform-aws-alb-ingress"
    - name: "terraform-aws-codebuild"
      description: "Terraform Module to easily leverage AWS CodeBuild for Continuous Integration"
      url: "https://github.com/cloudposse/terraform-aws-codebuild"
    - name: "terraform-aws-ecr"
      description: "Terraform Module to manage Docker Container Registries on AWS ECR"
      url: "https://github.com/cloudposse/terraform-aws-ecr"
    - name: "terraform-aws-ecs-web-app"
      description: "Terraform module that implements a web app on ECS and supporting AWS resources"
      url: "https://github.com/cloudposse/terraform-aws-ecs-web-app"
    - name: "terraform-aws-ecs-codepipeline"
      description: "Terraform Module for CI/CD with AWS Code Pipeline and Code Build for ECS"
      url: "https://github.com/cloudposse/terraform-aws-ecs-codepipeline"
    - name: "terraform-aws-ecs-cloudwatch-sns-alarms"
      description: "Terraform module to create CloudWatch Alarms on ECS Service level metrics"
      url: "https://github.com/cloudposse/terraform-aws-ecs-cloudwatch-sns-alarms"
    - name: "terraform-aws-ecs-container-definition"
      description: "Terraform module to generate well-formed JSON documents that are passed to the aws_ecs_task_definition Terraform resource"
      url: "https://github.com/cloudposse/terraform-aws-ecs-container-definition"
    - name: "terraform-aws-lb-s3-bucket"
      description: "Terraform module to provision an S3 bucket with built in IAM policy to allow AWS Load Balancers to ship access logs."
      url: "https://github.com/cloudposse/terraform-aws-lb-s3-bucket"

# Short description of this project
description: |-
  Terraform module to create an ECS Service for a web app (task), and an ALB target group to route requests.

# How to use this project
usage: |-

  For a complete example, see [examples/complete](examples/complete)

  ```hcl
  module "label" {
    source    = "git::https://github.com/cloudposse/terraform-terraform-label.git?ref=master"
    namespace = "eg"
    stage     = "staging"
    name      = "app"
  }

  module "container_definition" {
    source          = "git::https://github.com/cloudposse/terraform-aws-ecs-container-definition.git?ref=master"
    container_name  = "app"
    container_image = "cloudposse/geodesic:latest"

    environment = [
      {
        name  = "string_var"
        value = "I am a string"
      },
      {
        name  = "true_boolean_var"
        value = true
      },
      {
        name  = "false_boolean_var"
        value = false
      },
      {
        name  = "integer_var"
        value = 42
      },
    ]

    port_mappings = [
      {
        containerPort = 8080
        hostPort      = 80
        protocol      = "tcp"
      },
      {
        containerPort = 8081
        hostPort      = 443
        protocol      = "udp"
      },
    ]
  }

  module "alb_service_task" {
    source                    = "git::https://github.com/cloudposse/terraform-aws-ecs-alb-service-task.git?ref=master"
    namespace                 = "eg"
    stage                     = "staging"
    name                      = "app"
    alb_target_group_arn      = "xxxxxxx"
    container_definition_json = "${module.container_definition.json}"
    container_name            = "${module.label.id}"
    ecs_cluster_arn           = "xxxxxxx"
    launch_type               = "FARGATE"
    vpc_id                    = "xxxxxxx"
    security_group_ids        = ["xxxxx", "yyyyy"]
    private_subnet_ids        = ["xxxxx", "yyyyy", "zzzzz"]
  }
  ```

  The `container_image` in the `container_definition` module is the Docker image used to start a container.

  This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default.
  Other repositories are specified with either `repository-url/image:tag` or `repository-url/image@digest`.
  Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed.
  This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of `docker run`.

  When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use.
  However, subsequent updates to a repository image are not propagated to already running tasks.

  Images in Amazon ECR repositories can be specified by either using the full `registry/repository:tag` or `registry/repository@digest`.
  For example, `012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest` or `012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE`.

  Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo`).

  Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent`).

  Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu`).

  For more info, see [Container Definition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html).


# Other files to include in this README from the project folder
include:
  - "docs/targets.md"
  - "docs/terraform.md"

# Contributors to this project
contributors:
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Igor Rodionov"
    github: "goruha"
  - name: "Andriy Knysh"
    github: "aknysh"
  - name: "Sarkis Varozian"
    github: "sarkis"
